type PropertyShared = 
 record {
   immutable: bool;
   name: text;
   value: CandyShared;
 };
type CandyShared = 
 variant {
   Array: vec CandyShared;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec PropertyShared;
   Float: float64;
   Floats: vec float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Ints: vec int;
   Map: vec record {
              text;
              CandyShared;
            };
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: vec nat;
   Option: opt CandyShared;
   Principal: principal;
   Set: vec CandyShared;
   Text: text;
   ValueMap: vec record {
                   CandyShared;
                   CandyShared;
                 };
 };
service : {
  candyArrayToJson: () -> (text) query;
  candyBlobToBlob: () -> (blob) query;
  candyBlobToJson: () -> (text) query;
  candyBoolToJson: () -> (text) query;
  candyBytesToBlob: () -> (blob) query;
  candyBytesToJson: () -> (text) query;
  candyClassToJson: () -> (text) query;
  candyFloatToBlob: () -> (blob) query;
  candyFloatToJson: () -> (text) query;
  candyFloatsToJson: () -> (text) query;
  candyInt16ToJson: () -> (text) query;
  candyInt32ToJson: () -> (text) query;
  candyInt64ToJson: () -> (text) query;
  candyInt8ToJson: () -> (text) query;
  candyIntToBlob: () -> (blob) query;
  candyIntToJson: () -> (text) query;
  candyIntsToJson: () -> (text) query;
  candyNat16ToBlob: () -> (blob) query;
  candyNat16ToJson: () -> (text) query;
  candyNat32ToBlob: () -> (blob) query;
  candyNat32ToJson: () -> (text) query;
  candyNat64ToBlob: () -> (blob) query;
  candyNat64ToJson: () -> (text) query;
  candyNat8ToBlob: () -> (blob) query;
  candyNat8ToJson: () -> (text) query;
  candyNatToBlob: () -> (blob) query;
  candyNatToJson: () -> (text) query;
  candyNatsToJson: () -> (text) query;
  candyOptionToJson: () -> (text) query;
  candyPrincipalToBlob: () -> (blob) query;
  candyPrincipalToJson: () -> (text) query;
  candySomeToJson: () -> (text) query;
  candyTextToBlob: () -> (blob) query;
  candyTextToJson: () -> (text) query;
  getArray: () -> (CandyShared) query;
  getBlob: () -> (CandyShared) query;
  getBool: () -> (CandyShared) query;
  getBytes: () -> (CandyShared) query;
  getCandyMap: () -> (CandyShared) query;
  getCandySet: () -> (CandyShared) query;
  getCandyValueMap: () -> (CandyShared) query;
  getClass: () -> (CandyShared) query;
  getFloat: () -> (CandyShared) query;
  getFloats: () -> (CandyShared) query;
  getInt: () -> (CandyShared) query;
  getInt16: () -> (CandyShared) query;
  getInt32: () -> (CandyShared) query;
  getInt64: () -> (CandyShared) query;
  getInt8: () -> (CandyShared) query;
  getInts: () -> (CandyShared) query;
  getNat: () -> (CandyShared) query;
  getNat16: () -> (CandyShared) query;
  getNat32: () -> (CandyShared) query;
  getNat64: () -> (CandyShared) query;
  getNat8: () -> (CandyShared) query;
  getNats: () -> (CandyShared) query;
  getNullOption: () -> (CandyShared) query;
  getOptSome: () -> (CandyShared) query;
  getPrincipal: () -> (CandyShared) query;
  getText: () -> (CandyShared) query;
  sizeOfCandyArray: () -> (nat) query;
  sizeOfCandyBlob: () -> (nat) query;
  sizeOfCandyBool: () -> (nat) query;
  sizeOfCandyBytes: () -> (nat) query;
  sizeOfCandyClass: () -> (nat) query;
  sizeOfCandyFloat: () -> (nat) query;
  sizeOfCandyFloats: () -> (nat) query;
  /// Get Candy Shared Size
  ///     *
  sizeOfCandyInt: () -> (nat) query;
  sizeOfCandyInt16: () -> (nat) query;
  sizeOfCandyInt32: () -> (nat) query;
  sizeOfCandyInt64: () -> (nat) query;
  sizeOfCandyInt8: () -> (nat) query;
  sizeOfCandyInts: () -> (nat) query;
  sizeOfCandyNat: () -> (nat) query;
  sizeOfCandyNat16: () -> (nat) query;
  sizeOfCandyNat32: () -> (nat) query;
  sizeOfCandyNat64: () -> (nat) query;
  sizeOfCandyNat8: () -> (nat) query;
  sizeOfCandyNats: () -> (nat) query;
  sizeOfCandyOption: () -> (nat) query;
  sizeOfCandyOptionNone: () -> (nat) query;
  sizeOfCandyPrincipal: () -> (nat) query;
  sizeOfCandySet: () -> (nat) query;
  sizeOfCandyText: () -> (nat) query;
  sizeOfCandyValueMap: () -> (nat) query;
}
