export const idlFactory = ({ IDL }) => {
  const CandyShared = IDL.Rec();
  const PropertyShared = IDL.Record({
    'value' : CandyShared,
    'name' : IDL.Text,
    'immutable' : IDL.Bool,
  });
  CandyShared.fill(
    IDL.Variant({
      'Int' : IDL.Int,
      'Map' : IDL.Vec(IDL.Tuple(IDL.Text, CandyShared)),
      'Nat' : IDL.Nat,
      'Set' : IDL.Vec(CandyShared),
      'Nat16' : IDL.Nat16,
      'Nat32' : IDL.Nat32,
      'Nat64' : IDL.Nat64,
      'Blob' : IDL.Vec(IDL.Nat8),
      'Bool' : IDL.Bool,
      'Int8' : IDL.Int8,
      'Ints' : IDL.Vec(IDL.Int),
      'Nat8' : IDL.Nat8,
      'Nats' : IDL.Vec(IDL.Nat),
      'Text' : IDL.Text,
      'Bytes' : IDL.Vec(IDL.Nat8),
      'Int16' : IDL.Int16,
      'Int32' : IDL.Int32,
      'Int64' : IDL.Int64,
      'Option' : IDL.Opt(CandyShared),
      'Floats' : IDL.Vec(IDL.Float64),
      'Float' : IDL.Float64,
      'Principal' : IDL.Principal,
      'Array' : IDL.Vec(CandyShared),
      'ValueMap' : IDL.Vec(IDL.Tuple(CandyShared, CandyShared)),
      'Class' : IDL.Vec(PropertyShared),
    })
  );
  return IDL.Service({
    'candyArrayToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyBlobToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyBlobToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyBoolToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyBytesToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyBytesToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyClassToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyFloatToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyFloatToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyFloatsToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyInt16ToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyInt32ToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyInt64ToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyInt8ToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyIntToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyIntToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyIntsToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyNat16ToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyNat16ToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyNat32ToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyNat32ToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyNat64ToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyNat64ToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyNat8ToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyNat8ToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyNatToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyNatToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyNatsToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyOptionToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyPrincipalToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyPrincipalToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candySomeToJson' : IDL.Func([], [IDL.Text], ['query']),
    'candyTextToBlob' : IDL.Func([], [IDL.Vec(IDL.Nat8)], ['query']),
    'candyTextToJson' : IDL.Func([], [IDL.Text], ['query']),
    'getArray' : IDL.Func([], [CandyShared], ['query']),
    'getBlob' : IDL.Func([], [CandyShared], ['query']),
    'getBool' : IDL.Func([], [CandyShared], ['query']),
    'getBytes' : IDL.Func([], [CandyShared], ['query']),
    'getCandyMap' : IDL.Func([], [CandyShared], ['query']),
    'getCandySet' : IDL.Func([], [CandyShared], ['query']),
    'getCandyValueMap' : IDL.Func([], [CandyShared], ['query']),
    'getClass' : IDL.Func([], [CandyShared], ['query']),
    'getFloat' : IDL.Func([], [CandyShared], ['query']),
    'getFloats' : IDL.Func([], [CandyShared], ['query']),
    'getInt' : IDL.Func([], [CandyShared], ['query']),
    'getInt16' : IDL.Func([], [CandyShared], ['query']),
    'getInt32' : IDL.Func([], [CandyShared], ['query']),
    'getInt64' : IDL.Func([], [CandyShared], ['query']),
    'getInt8' : IDL.Func([], [CandyShared], ['query']),
    'getInts' : IDL.Func([], [CandyShared], ['query']),
    'getNat' : IDL.Func([], [CandyShared], ['query']),
    'getNat16' : IDL.Func([], [CandyShared], ['query']),
    'getNat32' : IDL.Func([], [CandyShared], ['query']),
    'getNat64' : IDL.Func([], [CandyShared], ['query']),
    'getNat8' : IDL.Func([], [CandyShared], ['query']),
    'getNats' : IDL.Func([], [CandyShared], ['query']),
    'getNullOption' : IDL.Func([], [CandyShared], ['query']),
    'getOptSome' : IDL.Func([], [CandyShared], ['query']),
    'getPrincipal' : IDL.Func([], [CandyShared], ['query']),
    'getText' : IDL.Func([], [CandyShared], ['query']),
    'sizeOfCandyArray' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyBlob' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyBool' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyBytes' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyClass' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyFloat' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyFloats' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyInt' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyInt16' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyInt32' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyInt64' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyInt8' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyInts' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyNat' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyNat16' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyNat32' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyNat64' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyNat8' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyNats' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyOption' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyOptionNone' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyPrincipal' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandySet' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyText' : IDL.Func([], [IDL.Nat], ['query']),
    'sizeOfCandyValueMap' : IDL.Func([], [IDL.Nat], ['query']),
  });
};
export const init = ({ IDL }) => { return []; };
